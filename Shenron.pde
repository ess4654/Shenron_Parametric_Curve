import ddf.minim.*;

Minim minim;
AudioPlayer player;

float DefaultScale = 0.26;
float FR = 28;
float SampleRate = 13;

boolean running = true;
boolean DEBUGGING = false;
boolean SoundOn = true;

float t = 0;
float scale = DefaultScale;
color transparent = color(0, 0, 0, 0);
color red = color(199, 55, 46);
color beige = color(253, 217, 133);
color eyes = color(241, 42, 23);
color brown = color(82, 43, 0);
color darkgreen = color(0, 94, 21);
color green = color(129, 201, 16);
color grey = color(169, 161, 172);
color white = color(255, 255, 255);
ArrayList<PVector> points = new ArrayList<PVector>();
ArrayList<Integer> lineColor = new ArrayList<Integer>();
ArrayList<Integer> strokes = new ArrayList<Integer>();

void setup()
{
  fullScreen(P2D);
  //size(800, 800, P2D);
  background(0);
  noFill();
  smooth();
  frameRate(FR);
  
  minim = new Minim(this);
  player = minim.loadFile("Dragon Ball Remix.mp3");
  if(SoundOn)
    player.loop();
}

void keyPressed() {
  if(key == ' ')
    running = !running;
  if(key == 'r')
    reset();
}

void reset()
{
  frameCount = -1;
  t = 0;
  lineColor.clear();
  strokes.clear();
  points.clear();
  minim.stop();
  minim = new Minim(this);
  if(SoundOn)
    player.loop();
  scale = DefaultScale;
}

float updateT(float T)
{
  T += 0.008;
  
  if(T >= 468.145) { //END
    strokes.add(1);
    lineColor.add(color(0, 0, 0));
    return 152 * PI;
  }
  if(T >= 464.971 && T < 468.145) { //????
    strokes.add(3);
    lineColor.add(green);
    return T;
  }
  if(T >= 455.589 && T < 464.971) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 464.971;
  }
  if(T >= 452.391 && T < 455.589) { //FEATHERS AND TAIL
    strokes.add(3);
    lineColor.add(green);
    return T;
  }
  if(T >= 443.032 && T < 452.391) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 452.391;
  }
  if(T >= 439.844 && T < 443.032) { //TAIL
    strokes.add(3);
    if(T < 441.066)
      lineColor.add(green);
    else
      lineColor.add(darkgreen);
    return T - 0.002;
  }
  if(T >= 430.481 && T < 439.844) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 439.844;
  }
  if(T >= 427.275 && T < 430.481) { //FEATHER
    strokes.add(3);
    lineColor.add(darkgreen);
    return T - 0.002;
  }
  if(T >= 417.927 && T < 427.275) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 427.275;
  }
  if(T >= 414.769 && T < 417.927) { //FRILL INSIDE
    strokes.add(2);
    lineColor.add(darkgreen);
    return T;
  }
  if(T >= 405.374 && T < 414.769) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 414.769;
  }
  if(T >= 402.152 && T < 405.374) { //LEFT FRILL
    strokes.add(2);
    lineColor.add(green);
    return T - 0.002;
  }
  if(T >= 392.703 && T < 402.152) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 402.152;
  }
  if(T >= 389.567 && T < 392.703) { //SCALES
    strokes.add(2);
    lineColor.add(beige);
    return T - 0.004;
  }
  if(T >= 380.185 && T < 389.567) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 389.567;
  }
  if(T >= 377.095 && T < 380.185) { //SCALES
    strokes.add(2);
    lineColor.add(beige);
    return T - 0.004;
  }
  if(T >= 367.649 && T < 377.095) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 377.095;
  }
  if(T >= 364.435 && T < 367.649) { //SCALES
    strokes.add(2);
    lineColor.add(beige);
    return T - 0.004;
  }
  if(T >= 355.105 && T < 364.435) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 364.435;
  }
  if(T >= 351.859 && T < 355.105) { //FEATHERS
    strokes.add(3);
    if(T < 353.402)
      lineColor.add(green);
    else
      lineColor.add(darkgreen);
    return T;
  }
  if(T >= 342.564 && T < 351.859) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 351.859;
  }
  if(T >= 339.350 && T < 342.564) { //HEAD CREASE
    strokes.add(2);
    lineColor.add(green);
    return T;
  }
  if(T >= 330.059 && T < 339.350) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 339.350;
  }
  if(T >= 326.813 && T < 330.059) { //LEFT EYE
    strokes.add(2);
    if(T < 327.492)
      lineColor.add(green);
    else
      lineColor.add(eyes);
    return T;
  }
  if(T >= 317.124 && T < 326.813) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 326.813;
  }
  if(T >= 314.228 && T < 317.124) { //RIGHT EYE
    strokes.add(2);
    lineColor.add(eyes);
    return T;
  }
  if(T >= 304.817 && T < 314.228) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 314.228;
  }
  if(T >= 301.619 && T < 304.817) { //HEAD LINE
    strokes.add(2);
    lineColor.add(green);
    return T - 0.002;
  }
  if(T >= 292.238 && T < 301.619) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 301.619;
  }
  if(T >= 289.031 && T < 292.238) { //HEAD
    strokes.add(3);
    lineColor.add(green);
    return T;
  }
  if(T >= 279.675 && T < 289.031) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 289.031;
  }
  if(T >= 276.493 && T < 279.675) { //??????
    strokes.add(2);
    lineColor.add(green);
    return T;
  }
  if(T >= 267.114 && T < 276.493) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 276.493;
  }
  if(T >= 263.956 && T < 267.114) { //RIGHT FRILLS
    strokes.add(2);
    lineColor.add(green);
    return T;
  }
  if(T >= 254.498 && T < 263.956) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 263.956;
  }
  if(T >= 251.339 && T < 254.498) { //TAIL INSIDE
    strokes.add(3);
    lineColor.add(red);
    return T - 0.002;
  }
  if(T >= 241.966 && T < 251.339) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 251.339;
  }
  if(T >= 238.8 && T < 241.966) { //INSIDE
    strokes.add(2);
    lineColor.add(darkgreen);
    return T - 0.002;
  }
  if(T >= 229.226 && T < 238.8) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 238.8;
  }
  if(T >= 226.252 && T < 229.226) { //????
    strokes.add(3);
    if(T < 227.139)
      lineColor.add(green);
    else if(T < 228.634)
      lineColor.add(darkgreen);
    else
      lineColor.add(green);
    return T;
  }
  if(T >= 216.849 && T < 226.252) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 226.252;
  }
  if(T >= 213.635 && T < 216.849) { //FEATHERS
    strokes.add(3);
    lineColor.add(darkgreen);
    return T;
  }
  if(T >= 204.173 && T < 213.635) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 213.635;
  }
  if(T >= 201.071 && T < 204.173) { //LEFT HORN
    strokes.add(2);
    lineColor.add(brown);
    return T - 0.002;
  }
  if(T >= 191.637 && T < 201.071) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 201.071;
  }
  if(T >= 188.511 && T < 191.637) { //RIGHT HORN
    strokes.add(2);
    lineColor.add(brown);
    return T - 0.002;
  }
  if(T >= 177.570 && T < 188.511) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 188.511;
  }
  if(T >= 175.931 && T < 177.570) { //LEFT MOUSTACHE
    strokes.add(2);
    lineColor.add(green);
    return T - 0.004;
  }
  if(T >= 164.930 && T < 175.931) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 175.931;
  }
  if(T >= 163.379 && T < 164.930) { //RIGHT MOUSTACHE
    strokes.add(2);
    lineColor.add(green);
    return T - 0.004;
  }
  if(T >= 153.997 && T < 163.379) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 163.379;
  }
  if(T >= 150.799 && T < 153.997) { //TAIL FEATHERS
    strokes.add(3);
    lineColor.add(darkgreen);
    return T;
  }
  if(T >= 144.477 && T < 150.799) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 150.799;
  }
  if(T >= 141.359 && T < 144.477) { //TAIL UNDERNEITH
    strokes.add(3);
    lineColor.add(darkgreen);
    return T;
  }
  if(T >= 128.832 && T < 141.359) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 141.359;
  }
  if(T >= 125.664 && T < 128.832) { //FOOT TOP
    strokes.add(2);
    if(T < 126.525)
      lineColor.add(green);
    else if(T < 126.825)
      lineColor.add(grey);
    else if(T < 126.977)
      lineColor.add(green);
    else if(T < 127.282)
      lineColor.add(grey);
    else if(T < 127.538)
      lineColor.add(green);
    else if(T < 127.915)
      lineColor.add(grey);
    else if(T < 128.129)
      lineColor.add(green);
    else if(T < 128.490)
      lineColor.add(grey);
    else
      lineColor.add(green);
    return T - 0.004;
  }
  if(T >= 116.229 && T < 125.664) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 125.664;
  }
  if(T >= 113.1 && T < 116.229) { //TAIL
    strokes.add(4);
    if(T < 114.268)
      lineColor.add(red);
    else if(T < 115.268)
      lineColor.add(green);
    else
      lineColor.add(red);
    return T;
  }
  if(T >= 103.737 && T < 113.1) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 113.1;
  }
  if(T >= 100.536 && T < 103.737) { //TAIL
    strokes.add(4);
    lineColor.add(green);
    return T - 0.002;
  }
  if(T >= 91.113 && T < 100.536) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 100.536;
  }
  if(T >= 87.968 && T < 91.113) { //TAIL
    strokes.add(4);
    if(T < 88.745)
      lineColor.add(red);
    else if(T < 89.424)
      lineColor.add(green);
    else if(T < 89.838)
      lineColor.add(red);
    else
      lineColor.add(green);
    return T - 0.004;
  }
  if(T >= 78.585 && T < 87.968) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 87.968;
  }
  if(T >= 75.400 && T < 78.585) { //TAIL
    strokes.add(3);
    lineColor.add(green);
    return T - 0.003;
  }
  if(T >= 65.996 && T < 75.400) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 75.400;
  }
  if(T >= 62.852 && T < 65.996) { //TAIL
    strokes.add(4);
    lineColor.add(red);
    return T - 0.004;
  }
  if(T >= 53.474 && T < 62.852) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 62.852;
  }
  if(T >= 50.391 && T < 53.474) { //TAIL
    strokes.add(3);
    if(T < 51.387)
      lineColor.add(red);
    else if(T < 52.323)
      lineColor.add(green);
    else
      lineColor.add(darkgreen);
    return T - 0.002;
  }
  if(T >= 40.910 && T < 50.391) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 50.391;
  }
  if(T >= 37.919 && T < 40.910) { //TAIL FLUFF
    strokes.add(2);
    lineColor.add(darkgreen);
    return T - 0.002;
  }
  if(T >= 28.283 && T < 37.919) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 37.919;
  }
  if(T >= 25.137 && T < 28.283) { //TAIL FAR RIGHT
    strokes.add(3);
    if(T < 26.432)
      lineColor.add(beige);
    else if(T < 27.235)
      lineColor.add(red);
    else
      lineColor.add(green);
    return T - 0.006;
  }
  if(T >= 15.800 && T < 25.137) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 25.137;
  }
  if(T >= 12.668 && T < 15.800) { //TAIL END
    strokes.add(3);
    if(T < 13.900)
      lineColor.add(darkgreen);
    else if(T < 14.756)
      lineColor.add(red);
    else
      lineColor.add(green);
    return T;
  }
  if(T >= 3.295 && T < 12.668) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 12.668;
  }
  else { //TAIL END
    strokes.add(2);
    lineColor.add(darkgreen);
  }
  
  return T;
}

void draw()
{ 
  //if(frameCount < (FR/2.0)) return;
  if(t <= 152 * PI && running)
  {
    for(int z = 0; z<SampleRate; z++) {
      t = updateT(t);
      points.add(new PVector(x(t), -y(t)));
      if(DEBUGGING)
        print(t + "\n");
    }
  } else {
    if(!DEBUGGING)
      scale += 0.00036;
  }
  
  translate(width/2, height/2 - 50);
  background(0);
  
  beginShape();
  for(int i = 0; i < points.size(); i++)
  {
    //if(points.get(i).x == 0 && points.get(i).y == 0) continue;
    strokeWeight(strokes.get(i));
    stroke(lineColor.get(i));
    point(points.get(i).x * scale, points.get(i).y * scale);
  }
  endShape();
}

float sgn(float x)
{
  if(x == 0) return 0;
  else if(x > 0) return 1;
  else return -1;
}

float theta(float x)
{
  if(x == 0) return 0.5;
  else if(x > 0) return 1;
  else return 0;
}

float SIN(float x)
{
  return sin(x);
}

float x(float t)
{
  return ((-36.0/5*sin(11.0/7 - 7*t) - 207.0/13*sin(11.0/7 - 6*t) - 433.0/24*sin(11.0/7 - 5*t) - 533.0/6*sin(11.0/7 - 3*t) - 135.0/4*sin(11.0/7 -t) + 263.0/6*sin(2*t + 8.0/5) + 14.0/5*sin(4*t + 11.0/7) + 171.0/7*sin(8*t + 8.0/5) + 127.0/9*sin(9*t + 8.0/5) + 1.0/2*sin(10*t + 8.0/5) + 5.0/9*sin(11*t + 11.0/7) + 10.0/11*sin(12*t + 3.0/2) - 1081)*theta(151*PI -t)*theta(t - 147*PI) + (-94.0/9*sin(14.0/9 - 10*t) + 535.0/9*sin(t + 33.0/7) + 911.0/5*sin(2*t + 8.0/5) + 89.0/3*sin(3*t + 14.0/3) + 544.0/9*sin(4*t + 8.0/5) + 881.0/16*sin(5*t + 8.0/5) + 25.0/6*sin(6*t + 5.0/3) + 58.0/7*sin(7*t + 33.0/7) + 400.0/21*sin(8*t + 8.0/5) + 2.0/5*sin(9*t + 23.0/5) + 5.0/7*sin(11*t + 5.0/3) + 58.0/5*sin(12*t + 8.0/5) + 1117.0/5)*theta(147*PI -t)*theta(t - 143*PI) + (-31.0/9*sin(10.0/7 - 23*t) - 7.0/5*sin(10.0/7 - 22*t) - 4.0/7*sin(3.0/2 - 19*t) - 44.0/5*sin(3.0/2 - 17*t) - 13.0/3*sin(3.0/2 - 15*t) - 37.0/7*sin(3.0/2 - 14*t) - 231.0/8*sin(3.0/2 - 12*t) - 81.0/5*sin(14.0/9 - 10*t) - 15*sin(14.0/9 - 8*t) - 389.0/6*sin(11.0/7 - 3*t) - 911.0/8*sin(11.0/7 - 2*t) + 4015.0/16*sin(t + 8.0/5) + 366.0/7*sin(4*t + 8.0/5) + 333.0/5*sin(5*t + 8.0/5) + 144.0/5*sin(6*t + 8.0/5) + 21.0/4*sin(7*t + 11.0/7) + 36.0/5*sin(9*t + 8.0/5) + 46.0/7*sin(11*t + 5.0/3) + 12.0/5*sin(13*t + 13.0/8) + 108.0/7*sin(16*t + 5.0/3) + 11.0/3*sin(18*t + 5.0/3) + 5.0/4*sin(20*t + 5.0/3) + 8.0/5*sin(21*t + 5.0/3) + 1.0/3*sin(24*t + 22.0/5) + 2*sin(25*t + 12.0/7) +sin(26*t + 9.0/5) + 3.0/2*sin(27*t + 8.0/5) - 2511.0/10)*theta(143*PI -t)*theta(t - 139*PI) + (-3.0/4*sin(3.0/2 - 24*t) - 2.0/7*sin(3.0/2 - 21*t) - 4.0/9*sin(11.0/7 - 20*t) - 5.0/4*sin(11.0/7 - 13*t) - 8.0/3*sin(11.0/7 - 12*t) - 5.0/9*sin(11.0/7 - 10*t) + 496*sin(t + 8.0/5) + 153.0/14*sin(2*t + 8.0/5) + 167.0/5*sin(3*t + 11.0/7) + 27.0/8*sin(4*t + 33.0/7) + 15*sin(5*t + 8.0/5) + 1.0/9*sin(6*t + 10.0/7) + 77.0/9*sin(7*t + 8.0/5) + 7.0/2*sin(8*t + 8.0/5) + 51.0/13*sin(9*t + 8.0/5) + 18.0/7*sin(11*t + 8.0/5) + 1.0/29*sin(14*t + 13.0/3) + 1.0/10*sin(15*t + 11.0/7) + 1.0/19*sin(16*t + 5.0/3) + 7.0/3*sin(17*t + 8.0/5) + 3.0/5*sin(18*t + 14.0/3) + 10.0/7*sin(19*t + 8.0/5) + 1.0/2*sin(22*t + 7.0/4) + 2.0/5*sin(23*t + 5.0/3) + 1.0/4*sin(25*t + 7.0/5) + 1.0/2*sin(26*t + 7.0/4) + 2.0/7*sin(27*t + 5.0/3) + 1.0/4*sin(28*t + 8.0/5) - 522.0/5)*theta(139*PI -t)*theta(t - 135*PI) + (331.0/3*sin(t + 8.0/5) + 5.0/9*sin(2*t + 32.0/7) + 41.0/4*sin(3*t + 8.0/5) + 2*sin(4*t + 8.0/5) + 23.0/9*sin(5*t + 8.0/5) + 13.0/7*sin(6*t + 8.0/5) + 10.0/11*sin(7*t + 11.0/7) + 1.0/3*sin(8*t + 14.0/3) + 5.0/3*sin(9*t + 8.0/5) + 1.0/3*sin(10*t + 5.0/3) + 21.0/20*sin(11*t + 11.0/7) + 11.0/12*sin(12*t + 33.0/7) + 2302.0/3)*theta(135*PI -t)*theta(t - 131*PI) + (-83.0/5*sin(11.0/7 - 9*t) - 69.0/7*sin(14.0/9 - 8*t) - 15.0/4*sin(11.0/7 - 3*t) + 13.0/3*sin(t + 8.0/5) + 28.0/3*sin(2*t + 8.0/5) + 55.0/7*sin(4*t + 11.0/7) + 13.0/2*sin(5*t + 8.0/5) + 73.0/7*sin(6*t + 8.0/5) + 13.0/3*sin(7*t + 8.0/5) + 163.0/7*sin(10*t + 8.0/5) + 11.0/7*sin(11*t + 8.0/5) + 24.0/5*sin(12*t + 8.0/5) - 8918.0/9)*theta(131*PI -t)*theta(t - 127*PI) + (-1.0/4*sin(9.0/7 - 39*t) - 1.0/4*sin(7.0/5 - 36*t) - 19.0/18*sin(14.0/9 - 31*t) - 23.0/9*sin(3.0/2 - 23*t) - 39.0/4*sin(11.0/7 - 21*t) + 2263.0/7*sin(t + 11.0/7) + 295*sin(2*t + 33.0/7) + 377.0/5*sin(3*t + 33.0/7) + 299.0/5*sin(4*t + 33.0/7) + 28.0/3*sin(5*t + 14.0/3) + 122.0/5*sin(6*t + 33.0/7) + 86.0/17*sin(7*t + 8.0/5) + 29.0/2*sin(8*t + 33.0/7) + 3.0/4*sin(9*t + 32.0/7) + 101.0/20*sin(10*t + 14.0/3) + 69.0/4*sin(11*t + 33.0/7) + 21.0/2*sin(12*t + 11.0/7) + 11.0/3*sin(13*t + 3.0/2) + 61.0/4*sin(14*t + 11.0/7) + 26.0/7*sin(15*t + 33.0/7) + 91.0/6*sin(16*t + 14.0/3) + 59.0/7*sin(17*t + 14.0/3) + 3.0/4*sin(18*t + 37.0/8) + 29.0/5*sin(19*t + 11.0/7) + 28.0/5*sin(20*t + 11.0/7) + 233.0/13*sin(22*t + 11.0/7) + 7.0/2*sin(24*t + 11.0/7) + 13.0/3*sin(25*t + 3.0/2) + 9.0/5*sin(26*t + 14.0/9) + 23.0/7*sin(27*t + 14.0/3) + 2.0/3*sin(28*t + 11.0/7) + 12.0/5*sin(29*t + 3.0/2) + 11.0/5*sin(30*t + 11.0/7) + 71.0/18*sin(32*t + 14.0/9) + 9.0/7*sin(33*t + 3.0/2) + 3.0/8*sin(34*t + 3.0/2) + 1.0/4*sin(35*t + 14.0/9) + 8.0/3*sin(37*t + 3.0/2) + 7.0/6*sin(38*t + 3.0/2) + 1.0/4*sin(40*t + 3.0/2) + 1.0/3*sin(41*t + 4.0/3) + 56.0/11*sin(42*t + 3.0/2) + 23.0/5)*theta(127*PI -t)*theta(t - 123*PI) + (-2.0/5*sin(11.0/7 - 39*t) - 1.0/15*sin(5.0/8 - 33*t) - 1.0/8*sin(5.0/4 - 32*t) - 2.0/3*sin(10.0/7 - 30*t) - 12.0/7*sin(11.0/7 - 29*t) - 12.0/5*sin(11.0/7 - 26*t) - 11.0/3*sin(3.0/2 - 19*t) - 17.0/4*sin(11.0/7 - 18*t) - 44.0/5*sin(11.0/7 - 14*t) - 173.0/5*sin(11.0/7 - 8*t) + 1196.0/3*sin(t + 11.0/7) + 928.0/7*sin(2*t + 8.0/5) + 112.0/3*sin(3*t + 8.0/5) + 232.0/7*sin(4*t + 8.0/5) + 9.0/7*sin(5*t + 7.0/4) + 283.0/6*sin(6*t + 8.0/5) + 80.0/7*sin(7*t + 33.0/7) + 130.0/3*sin(9*t + 8.0/5) + 148.0/21*sin(10*t + 14.0/3) + 74.0/5*sin(11*t + 8.0/5) + 8*sin(12*t + 33.0/7) + 41.0/4*sin(13*t + 8.0/5) + 40.0/9*sin(15*t + 8.0/5) + 31.0/3*sin(16*t + 8.0/5) + 103.0/8*sin(17*t + 8.0/5) + 5.0/6*sin(20*t + 14.0/3) + 23.0/6*sin(21*t + 8.0/5) + 32.0/7*sin(22*t + 8.0/5) + 48.0/7*sin(23*t + 8.0/5) + 1.0/13*sin(24*t + 10.0/7) + 4.0/7*sin(25*t + 4.0/3) + 1.0/5*sin(27*t + 13.0/9) + 1.0/3*sin(28*t + 3.0/2) + 1.0/2*sin(31*t + 14.0/3) + 4.0/5*sin(34*t + 12.0/7) + 7.0/2*sin(35*t + 8.0/5) + 7.0/6*sin(36*t + 14.0/3) + 1.0/16*sin(37*t + 4) +sin(38*t + 8.0/5) + 2.0/5*sin(40*t + 10.0/7) + 3.0/4*sin(41*t + 5.0/3) - 678)*theta(123*PI -t)*theta(t - 119*PI) + (-17.0/5*sin(14.0/9 - 22*t) - 111.0/11*sin(11.0/7 - 20*t) - 9.0/2*sin(11.0/7 - 18*t) - 121.0/20*sin(11.0/7 - 17*t) - 61.0/20*sin(11.0/7 - 10*t) - 39.0/10*sin(11.0/7 - 9*t) - 67.0/3*sin(11.0/7 - 5*t) - 347.0/5*sin(11.0/7 - 3*t) + 1709.0/3*sin(t + 33.0/7) + 164.0/7*sin(2*t + 33.0/7) + 143.0/9*sin(4*t + 33.0/7) + 253.0/28*sin(6*t + 33.0/7) + 49.0/4*sin(7*t + 33.0/7) + 37.0/2*sin(8*t + 33.0/7) + 2.0/7*sin(11*t + 4) + 102.0/5*sin(12*t + 33.0/7) + 21.0/4*sin(13*t + 33.0/7) + 25.0/6*sin(14*t + 33.0/7) + 18*sin(15*t + 11.0/7) + 57.0/4*sin(16*t + 11.0/7) + 51.0/5*sin(19*t + 8.0/5) + 22.0/9*sin(21*t + 13.0/8) + 20.0/7*sin(23*t + 8.0/5) + 3.0/8*sin(24*t + 33.0/7) + 2*sin(25*t + 14.0/9) + 4.0/3*sin(26*t + 14.0/3) + 1.0/3*sin(27*t + 14.0/3) + 2*sin(28*t + 11.0/7) + 7.0/3*sin(29*t + 3.0/2) + 1.0/9*sin(30*t + 5.0/4) + 3.0/4*sin(31*t + 8.0/5) + 1.0/6*sin(32*t + 9.0/5) + 4.0/7*sin(33*t + 3.0/2) + 1.0/20*sin(34*t + 6.0/5) + 6.0/5*sin(35*t + 11.0/7) + 3.0/7*sin(36*t + 14.0/9) + 4.0/7*sin(37*t + 11.0/7) + 1.0/3*sin(38*t + 37.0/8) + 6.0/5*sin(39*t + 11.0/7) - 247.0/8)*theta(119*PI -t)*theta(t - 115*PI) + (-1.0/5*sin(9.0/8 - 29*t) - 3.0/7*sin(3.0/2 - 26*t) - 14.0/15*sin(3.0/2 - 21*t) - 49.0/25*sin(11.0/7 - 17*t) - 1.0/2*sin(4.0/3 - 16*t) - 2*sin(3.0/2 - 12*t) - 11.0/4*sin(11.0/7 - 9*t) - 51.0/10*sin(14.0/9 - 8*t) - 150.0/7*sin(11.0/7 - 4*t) + 92.0/3*sin(t + 33.0/7) + 1912.0/9*sin(2*t + 8.0/5) + 97.0/7*sin(3*t + 8.0/5) + 17.0/3*sin(5*t + 33.0/7) + 137.0/7*sin(6*t + 8.0/5) + 71.0/12*sin(7*t + 8.0/5) + 45.0/7*sin(10*t + 8.0/5) + 23.0/7*sin(11*t + 5.0/3) + 1.0/7*sin(13*t + 21.0/5) + 11.0/4*sin(14*t + 13.0/8) + 17.0/7*sin(15*t + 8.0/5) + 8.0/5*sin(18*t + 5.0/3) + 5.0/4*sin(19*t + 5.0/3) + 1.0/15*sin(20*t + 19.0/5) + 3.0/5*sin(22*t + 5.0/3) + 13.0/8*sin(23*t + 5.0/3) + 3.0/5*sin(24*t + 37.0/8) + 1.0/5*sin(25*t + 14.0/9) + 3.0/2*sin(27*t + 5.0/3) + 1.0/5*sin(28*t + 23.0/5) + 1.0/10*sin(30*t + 9.0/2) - 1629.0/7)*theta(115*PI -t)*theta(t - 111*PI) + (-1.0/5*sin(4.0/3 - 11*t) - 31.0/3*sin(11.0/7 - 10*t) - 26.0/9*sin(11.0/7 - 8*t) - 7*sin(11.0/7 - 4*t) - 26.0/7*sin(11.0/7 - 3*t) + 52.0/3*sin(t + 11.0/7) + 127.0/18*sin(2*t + 8.0/5) + 92.0/7*sin(5*t + 8.0/5) + 7.0/4*sin(6*t + 8.0/5) + 1.0/5*sin(7*t + 4.0/3) + 39.0/7*sin(9*t + 8.0/5) + 7.0/3*sin(12*t + 8.0/5) - 2933.0/4)*theta(111*PI -t)*theta(t - 107*PI) + (-7.0/5*sin(11.0/7 - 7*t) - 10.0/7*sin(11.0/7 - 6*t) - 27.0/5*sin(11.0/7 - 4*t) - 39.0/4*sin(11.0/7 - 3*t) - 104.0/7*sin(11.0/7 - 2*t) - 18*sin(11.0/7 -t) + 49.0/4*sin(5*t + 8.0/5) + 3.0/5*sin(8*t + 11.0/7) + 5.0/6*sin(9*t + 8.0/5) + 13.0/6*sin(10*t + 8.0/5) + 1.0/3*sin(11*t + 13.0/8) + 1.0/2*sin(12*t + 11.0/7) - 4127.0/5)*theta(107*PI -t)*theta(t - 103*PI) + (-23.0/8*sin(11.0/7 - 9*t) - 11.0/4*sin(11.0/7 - 7*t) - 31.0/10*sin(11.0/7 - 6*t) + 20.0/7*sin(t + 33.0/7) + 29.0/4*sin(2*t + 8.0/5) + 24.0/5*sin(3*t + 8.0/5) + 43.0/5*sin(4*t + 8.0/5) + 45.0/11*sin(5*t + 8.0/5) + 7.0/5*sin(8*t + 11.0/7) + 6.0/7*sin(10*t + 11.0/7) + 2.0/7*sin(11*t + 8.0/5) + 1.0/17*sin(12*t + 7.0/4) - 4820.0/7)*theta(103*PI -t)*theta(t - 99*PI) + (-1.0/26*sin(12.0/11 - 27*t) - 1.0/5*sin(3.0/2 - 26*t) - 2.0/5*sin(3.0/2 - 22*t) - 1.0/3*sin(14.0/9 - 14*t) + 573.0/7*sin(t + 8.0/5) + 69.0/5*sin(2*t + 8.0/5) + 163.0/9*sin(3*t + 8.0/5) + 21.0/11*sin(4*t + 14.0/3) + 36.0/7*sin(5*t + 8.0/5) + 5.0/4*sin(6*t + 14.0/3) + 27.0/7*sin(7*t + 8.0/5) + 4.0/3*sin(8*t + 33.0/7) + 13.0/14*sin(9*t + 8.0/5) + 1.0/5*sin(10*t + 41.0/9) + 5.0/3*sin(11*t + 8.0/5) + 2.0/5*sin(12*t + 7.0/4) + 3.0/4*sin(13*t + 8.0/5) + 1.0/5*sin(16*t + 7.0/4) + 5.0/6*sin(17*t + 8.0/5) + 1.0/5*sin(18*t + 14.0/3) + 1.0/5*sin(19*t + 11.0/7) + 1.0/5*sin(21*t + 11.0/7) + 1.0/6*sin(23*t + 5.0/3) + 1.0/3*sin(24*t + 12.0/7) + 1.0/3*sin(25*t + 12.0/7) - 2312.0/3)*theta(99*PI -t)*theta(t - 95*PI) + (-41.0/7*sin(11.0/7 - 8*t) - 101.0/4*sin(11.0/7 - 2*t) - 1065.0/7*sin(11.0/7 -t) + 92.0/3*sin(3*t + 11.0/7) + 9.0/10*sin(4*t + 14.0/3) + 125.0/14*sin(5*t + 33.0/7) + 31.0/7*sin(6*t + 8.0/5) + 25.0/4*sin(7*t + 11.0/7) + 12.0/7*sin(9*t + 8.0/5) + 13*sin(10*t + 8.0/5) + 25.0/13*sin(11*t + 8.0/5) + 37.0/5*sin(12*t + 8.0/5) - 5413.0/7)*theta(95*PI -t)*theta(t - 91*PI) + (-1.0/6*sin(9.0/7 - 12*t) - 43.0/7*sin(11.0/7 - 11*t) - 51.0/13*sin(11.0/7 - 7*t) - 19.0/5*sin(11.0/7 - 6*t) - 87.0/5*sin(11.0/7 - 5*t) -sin(3.0/2 - 4*t) - 259.0/20*sin(11.0/7 - 3*t) + 349.0/6*sin(t + 8.0/5) + 491.0/12*sin(2*t + 8.0/5) + 1.0/6*sin(8*t + 14.0/3) + 2.0/5*sin(9*t + 9.0/5) + 5.0/3*sin(10*t + 8.0/5) - 3026.0/3)*theta(91*PI -t)*theta(t - 87*PI) + (-37.0/8*sin(14.0/9 - 12*t) - 23.0/3*sin(11.0/7 - 2*t) - 88.0/7*sin(11.0/7 -t) + 5.0/4*sin(3*t + 33.0/7) + 37.0/8*sin(4*t + 8.0/5) + 11.0/4*sin(5*t + 8.0/5) + 9.0/2*sin(6*t + 8.0/5) + 9.0/8*sin(7*t + 5.0/3) + 27.0/8*sin(8*t + 8.0/5) + 26.0/5*sin(9*t + 33.0/7) + 61.0/7*sin(10*t + 8.0/5) + 9.0/10*sin(11*t + 13.0/8) - 6914.0/11)*theta(87*PI -t)*theta(t - 83*PI) + (-53.0/7*sin(11.0/7 - 12*t) - 1.0/8*sin(1.0/2 - 11*t) - 8*sin(11.0/7 - 10*t) - 37.0/3*sin(11.0/7 - 8*t) - 10.0/7*sin(14.0/9 - 7*t) - 47.0/2*sin(11.0/7 - 6*t) - 375.0/7*sin(11.0/7 - 4*t) - 1588.0/5*sin(11.0/7 - 2*t) - 1464.0/5*sin(11.0/7 -t) + 226.0/7*sin(3*t + 8.0/5) + 53.0/9*sin(5*t + 11.0/7) + 4.0/5*sin(9*t + 3.0/2) + 235.0/3)*theta(83*PI -t)*theta(t - 79*PI) + (-188.0/9*sin(11.0/7 - 3*t) + 295.0/6*sin(t + 11.0/7) + 3529.0/21*sin(2*t + 11.0/7) + 10*sin(4*t + 11.0/7) + 35.0/8*sin(5*t + 11.0/7) + 21.0/4*sin(6*t + 11.0/7) + 46.0/7*sin(7*t + 33.0/7) + 57.0/8*sin(8*t + 11.0/7) + 1.0/4*sin(9*t + 7.0/5) + 9.0/8*sin(10*t + 33.0/7) + 19.0/6*sin(11*t + 33.0/7) + 31.0/10*sin(12*t + 8.0/5) - 2366.0/5)*theta(79*PI -t)*theta(t - 75*PI) + (-17.0/7*sin(11.0/7 - 5*t) - 133.0/3*sin(11.0/7 -t) + 191.0/3*sin(2*t + 11.0/7) + 79.0/2*sin(3*t + 11.0/7) + 11.0/4*sin(4*t + 11.0/7) + 25.0/8*sin(6*t + 11.0/7) + 55.0/27*sin(7*t + 11.0/7) + 14.0/3*sin(8*t + 8.0/5) + 1.0/4*sin(9*t + 8.0/5) + 1.0/12*sin(10*t + 3.0/2) +sin(11*t + 8.0/5) + 11.0/6*sin(12*t + 8.0/5) - 458.0/3)*theta(75*PI -t)*theta(t - 71*PI) + (-15.0/4*sin(11.0/7 - 21*t) - 2.0/5*sin(7.0/5 - 19*t) -sin(11.0/7 - 18*t) - 38.0/11*sin(11.0/7 - 15*t) - 31.0/8*sin(11.0/7 - 13*t) - 10.0/3*sin(11.0/7 - 8*t) - 124.0/25*sin(3.0/2 - 5*t) - 1426.0/19*sin(11.0/7 -t) + 986.0/9*sin(2*t + 11.0/7) + 46.0/5*sin(3*t + 3.0/2) + 363.0/7*sin(4*t + 11.0/7) + 337.0/16*sin(6*t + 11.0/7) + 23.0/6*sin(7*t + 14.0/9) + 19.0/7*sin(9*t + 8.0/5) + 1.0/5*sin(10*t + 1) + 4.0/5*sin(11*t + 33.0/7) + 31.0/8*sin(12*t + 11.0/7) + 46.0/5*sin(14*t + 11.0/7) + 23.0/12*sin(16*t + 11.0/7) + 9.0/2*sin(17*t + 11.0/7) + 35.0/6*sin(20*t + 11.0/7) + 16.0/7*sin(22*t + 11.0/7) + 2*sin(23*t + 3.0/2) - 4164.0/5)*theta(71*PI -t)*theta(t - 67*PI) + (-2.0/7*sin(4.0/3 - 34*t) - 16.0/15*sin(7.0/5 - 33*t) - 5.0/4*sin(13.0/9 - 32*t) - 1.0/9*sin(3.0/2 - 31*t) - 1.0/26*sin(5.0/4 - 28*t) - 6.0/5*sin(3.0/2 - 27*t) - 3.0/4*sin(10.0/7 - 26*t) - 5.0/6*sin(10.0/7 - 25*t) - 18.0/19*sin(13.0/9 - 24*t) - 1.0/4*sin(10.0/7 - 23*t) - 1.0/7*sin(3.0/2 - 22*t) - 14.0/5*sin(3.0/2 - 19*t) - 7.0/2*sin(3.0/2 - 18*t) - 9.0/4*sin(3.0/2 - 17*t) - 3.0/5*sin(3.0/2 - 16*t) - 19.0/5*sin(14.0/9 - 13*t) - 41.0/9*sin(14.0/9 - 8*t) - 71.0/6*sin(11.0/7 - 7*t) + 117.0/5*sin(t + 33.0/7) + 521.0/6*sin(2*t + 8.0/5) + 166.0/7*sin(3*t + 8.0/5) + 65.0/3*sin(4*t + 8.0/5) + 71.0/5*sin(5*t + 8.0/5) + 30.0/7*sin(6*t + 11.0/7) + 31.0/4*sin(9*t + 8.0/5) + 85.0/7*sin(10*t + 8.0/5) + 19.0/5*sin(11*t + 33.0/7) + 1.0/5*sin(12*t + 7.0/8) + 1.0/2*sin(14*t + 11.0/7) + 12.0/7*sin(15*t + 8.0/5) + 5.0/4*sin(20*t + 8.0/5) + 1.0/5*sin(21*t + 9.0/2) + 1.0/6*sin(29*t + 13.0/3) + 4.0/5*sin(30*t + 5.0/3) + 1.0/29*sin(35*t + 13.0/3) + 1.0/4*sin(36*t + 7.0/4) - 7209.0/7)*theta(67*PI -t)*theta(t - 63*PI) + (-8.0/7*sin(11.0/7 - 21*t) - 11.0/10*sin(11.0/7 - 20*t) - 3.0/4*sin(11.0/7 - 19*t) - 2.0/5*sin(3.0/2 - 18*t) - 4.0/3*sin(11.0/7 - 16*t) - 12.0/7*sin(11.0/7 - 14*t) - 22.0/7*sin(11.0/7 - 13*t) - 2.0/7*sin(4.0/3 - 11*t) - 6.0/5*sin(11.0/7 - 9*t) - 41.0/5*sin(11.0/7 - 8*t) - 233.0/7*sin(11.0/7 -t) + 50.0/3*sin(2*t + 11.0/7) + 96.0/5*sin(3*t + 11.0/7) + 22.0/3*sin(4*t + 11.0/7) + 111.0/8*sin(5*t + 8.0/5) + 23.0/8*sin(6*t + 14.0/9) + 39.0/5*sin(7*t + 8.0/5) + 27.0/4*sin(10*t + 8.0/5) + 41.0/20*sin(12*t + 8.0/5) + 9.0/7*sin(15*t + 14.0/3) + 9.0/4*sin(17*t + 8.0/5) + 1.0/3*sin(22*t + 32.0/7) + 6.0/7*sin(23*t + 14.0/3) + 1.0/2*sin(24*t + 8.0/5) + 2.0/5*sin(25*t + 14.0/9) + 1.0/6*sin(26*t + 9.0/7) + 3.0/4*sin(27*t + 11.0/7) + 3.0/8*sin(28*t + 3.0/2) + 4.0/5*sin(29*t + 8.0/5) + 1.0/7*sin(30*t + 14.0/3) + 1.0/4*sin(31*t + 33.0/7) + 1.0/8*sin(32*t + 14.0/9) - 4855.0/7)*theta(63*PI -t)*theta(t - 59*PI) + (-29.0/6*sin(11.0/7 - 9*t) - 17.0/4*sin(11.0/7 - 5*t) + 183.0/14*sin(t + 8.0/5) + 847.0/5*sin(2*t + 8.0/5) + 28.0/3*sin(3*t + 8.0/5) + 182.0/3*sin(4*t + 8.0/5) + 117.0/8*sin(6*t + 8.0/5) + 36.0/5*sin(7*t + 8.0/5) + 141.0/4*sin(8*t + 8.0/5) + 8.0/3*sin(10*t + 11.0/7) + 28.0/9*sin(11*t + 8.0/5) + 77.0/5*sin(12*t + 8.0/5) - 2281.0/2)*theta(59*PI -t)*theta(t - 55*PI) + (-4.0/3*sin(10.0/7 - 11*t) - 97.0/5*sin(11.0/7 - 10*t) - 5.0/2*sin(3.0/2 - 9*t) - 27.0/4*sin(11.0/7 - 8*t) - 446.0/7*sin(11.0/7 - 6*t) - 1469.0/5*sin(11.0/7 - 2*t) - 1.0/3*sin(1.0/4 -t) + 50.0/7*sin(3*t + 11.0/7) + 80.0/3*sin(4*t + 8.0/5) + 5*sin(5*t + 3.0/2) + 7.0/8*sin(7*t + 7.0/5) + 25.0/7*sin(12*t + 33.0/7) - 891.0/4)*theta(55*PI -t)*theta(t - 51*PI) + (-15.0/14*sin(10.0/7 - 12*t) - 44.0/7*sin(3.0/2 - 11*t) - 5.0/9*sin(11.0/10 - 10*t) - 22.0/5*sin(14.0/9 - 9*t) - 15*sin(11.0/7 - 5*t) - 65.0/6*sin(3.0/2 - 4*t) - 53.0/2*sin(11.0/7 - 3*t) - 277.0/7*sin(11.0/7 - 2*t) + 21.0/4*sin(t + 11.0/7) + 31.0/5*sin(6*t + 8.0/5) + 7*sin(7*t + 8.0/5) + 1.0/2*sin(8*t + 14.0/3) - 4479.0/4)*theta(51*PI -t)*theta(t - 47*PI) + (-26.0/7*sin(14.0/9 - 11*t) - 28.0/5*sin(14.0/9 - 10*t) - 131.0/26*sin(11.0/7 - 9*t) - 10.0/7*sin(10.0/7 - 8*t) - 43.0/3*sin(11.0/7 - 7*t) - 51.0/5*sin(11.0/7 - 6*t) - 126.0/25*sin(11.0/7 - 4*t) - 134.0/3*sin(11.0/7 - 3*t) + 316.0/5*sin(t + 8.0/5) + 129.0/2*sin(2*t + 8.0/5) + 31.0/6*sin(5*t + 11.0/7) + 1.0/4*sin(12*t + 9.0/7) - 2461.0/9)*theta(47*PI -t)*theta(t - 43*PI) + (-5.0/8*sin(11.0/7 - 47*t) - 1.0/4*sin(7.0/5 - 46*t) - 2.0/3*sin(3.0/2 - 41*t) - 5.0/6*sin(3.0/2 - 40*t) - 1.0/6*sin(7.0/5 - 38*t) - 7.0/4*sin(11.0/7 - 33*t) - 17.0/18*sin(3.0/2 - 31*t) - 1.0/4*sin(9.0/7 - 27*t) - 7.0/3*sin(3.0/2 - 26*t) - 10.0/3*sin(14.0/9 - 25*t) - 59.0/7*sin(11.0/7 - 21*t) - 7.0/3*sin(11.0/7 - 18*t) - 5.0/6*sin(3.0/2 - 17*t) - 27.0/13*sin(3.0/2 - 16*t) - 37.0/5*sin(11.0/7 - 15*t) - 22.0/3*sin(11.0/7 - 5*t) - 198.0/7*sin(11.0/7 - 4*t) - 43.0/2*sin(11.0/7 - 2*t) - 199.0/2*sin(11.0/7 -t) + 213.0/4*sin(3*t + 8.0/5) + 191.0/12*sin(6*t + 8.0/5) + 49.0/16*sin(7*t + 8.0/5) + 15.0/4*sin(8*t + 33.0/7) + 341.0/18*sin(9*t + 8.0/5) + 31.0/2*sin(10*t + 8.0/5) + 139.0/7*sin(11*t + 8.0/5) + 4.0/3*sin(12*t + 37.0/8) + 118.0/9*sin(13*t + 8.0/5) + 74.0/5*sin(14*t + 8.0/5) + 1.0/5*sin(19*t + 7.0/5) + 11.0/4*sin(20*t + 11.0/7) + 166.0/15*sin(22*t + 8.0/5) + 37.0/6*sin(23*t + 8.0/5) + 3.0/7*sin(24*t + 23.0/5) + 10.0/9*sin(28*t + 5.0/3) + 17.0/6*sin(29*t + 13.0/8) + 25.0/12*sin(30*t + 8.0/5) + 7.0/5*sin(32*t + 11.0/7) + 2.0/5*sin(34*t + 5.0/3) + 7.0/4*sin(35*t + 8.0/5) + 15.0/16*sin(36*t + 13.0/8) + 5.0/9*sin(37*t + 33.0/7) + 8.0/7*sin(39*t + 8.0/5) + 6.0/5*sin(42*t + 8.0/5) + 1.0/3*sin(43*t + 23.0/5) + 4.0/5*sin(44*t + 8.0/5) + 1.0/3*sin(45*t + 8.0/5) + 2.0/3*sin(48*t + 8.0/5) + 3.0/7*sin(49*t + 5.0/3) + 4.0/9*sin(50*t + 5.0/3) - 831.0/4)*theta(43*PI -t)*theta(t - 39*PI) + (-2.0/5*sin(4.0/3 - 12*t) - 156.0/31*sin(11.0/7 - 11*t) - 32.0/3*sin(11.0/7 - 9*t) - 3.0/2*sin(11.0/7 - 6*t) - 311.0/4*sin(11.0/7 - 3*t) + 1239.0/5*sin(t + 11.0/7) + 3529.0/10*sin(2*t + 8.0/5) + 799.0/16*sin(4*t + 11.0/7) + 31.0/5*sin(5*t + 33.0/7) + 38.0/5*sin(7*t + 33.0/7) + 62.0/7*sin(8*t + 8.0/5) + 39.0/5*sin(10*t + 11.0/7) - 1573.0/7)*theta(39*PI -t)*theta(t - 35*PI) + (-5020.0/7*sin(11.0/7 -t) + 763.0/6*sin(2*t + 8.0/5) + 103.0/7*sin(3*t + 11.0/7) + 209.0/26*sin(4*t + 11.0/7) + 1.0/2*sin(5*t + 51.0/13) + 27.0/5*sin(6*t + 11.0/7) + 5*sin(7*t + 8.0/5) + 43.0/6*sin(8*t + 8.0/5) + 27.0/8*sin(9*t + 5.0/3) + 31.0/7*sin(10*t + 8.0/5) + 1.0/4*sin(11*t + 7.0/4) + 17.0/3*sin(12*t + 8.0/5) - 1326.0/5)*theta(35*PI -t)*theta(t - 31*PI) + (-29.0/4*sin(11.0/7 - 21*t) - 36.0/5*sin(11.0/7 - 20*t) - 26.0/3*sin(14.0/9 - 14*t) - 97.0/4*sin(11.0/7 - 13*t) - 67.0/4*sin(11.0/7 - 9*t) - 199.0/5*sin(11.0/7 - 6*t) - 293.0/3*sin(11.0/7 - 5*t) - 83*sin(11.0/7 - 4*t) - 390*sin(11.0/7 - 3*t) + 316.0/3*sin(t + 8.0/5) + 1936.0/7*sin(2*t + 8.0/5) + 2*sin(7*t + 14.0/3) + 4*sin(8*t + 5.0/3) + 8.0/5*sin(10*t + 8.0/5) + 17.0/3*sin(11*t + 8.0/5) + 4.0/7*sin(12*t + 7.0/5) + 25.0/6*sin(15*t + 8.0/5) + 17.0/8*sin(16*t + 8.0/5) + 15.0/4*sin(17*t + 33.0/7) + 27.0/4*sin(18*t + 8.0/5) + 22.0/5*sin(19*t + 8.0/5) + 1.0/4*sin(22*t + 8.0/5) + 1.0/3*sin(23*t + 7.0/5) - 1622.0/3)*theta(31*PI -t)*theta(t - 27*PI) + (-14.0/3*sin(11.0/7 - 9*t) - 43.0/3*sin(11.0/7 - 5*t) - 455.0/8*sin(11.0/7 -t) + 1099.0/6*sin(2*t + 8.0/5) + 69.0/4*sin(3*t + 11.0/7) + 68.0/7*sin(4*t + 11.0/7) + 79.0/7*sin(6*t + 8.0/5) + 29.0/5*sin(7*t + 8.0/5) + 41.0/7*sin(8*t + 8.0/5) + 6.0/5*sin(10*t + 3.0/2) + 4.0/9*sin(11*t + 7.0/4) + 55.0/14*sin(12*t + 8.0/5) + 1305.0/7)*theta(27*PI -t)*theta(t - 23*PI) + (-13.0/3*sin(11.0/7 - 12*t) - 82.0/5*sin(11.0/7 - 8*t) - 149.0/3*sin(11.0/7 -t) + 8875.0/14*sin(2*t + 8.0/5) + 21*sin(3*t + 11.0/7) + 244.0/7*sin(4*t + 33.0/7) + 89.0/9*sin(5*t + 14.0/3) + 159.0/4*sin(6*t + 11.0/7) + 26.0/3*sin(7*t + 11.0/7) + 37.0/9*sin(9*t + 33.0/7) + 15.0/2*sin(10*t + 8.0/5) + 59.0/8*sin(11*t + 11.0/7) - 797.0/21)*theta(23*PI -t)*theta(t - 19*PI) + (-31.0/30*sin(3.0/2 - 12*t) - 71.0/6*sin(11.0/7 - 9*t) - 3.0/4*sin(10.0/7 - 8*t) - 76.0/7*sin(11.0/7 - 7*t) - 167.0/8*sin(11.0/7 - 5*t) - 23.0/6*sin(11.0/7 - 4*t) - 869.0/6*sin(11.0/7 - 3*t) - 133.0/12*sin(11.0/7 - 2*t) + 226.0/9*sin(t + 8.0/5) + 9.0/5*sin(6*t + 3.0/2) + 91.0/15*sin(10*t + 8.0/5) + 9.0/7*sin(11*t + 5.0/3) + 1279.0/8)*theta(19*PI -t)*theta(t - 15*PI) + (-4.0/3*sin(11.0/7 - 5*t) - 67.0/2*sin(11.0/7 - 4*t) + 8.0/7*sin(t + 8.0/5) + 1223.0/6*sin(2*t + 8.0/5) + 5.0/6*sin(3*t + 8.0/5) + 119.0/6*sin(6*t + 8.0/5) + 10.0/7*sin(7*t + 8.0/5) + 19.0/3*sin(8*t + 33.0/7) + 7.0/5*sin(9*t + 8.0/5) + 46.0/9*sin(10*t + 11.0/7) + 13.0/14*sin(11*t + 14.0/9) + 15.0/4*sin(12*t + 33.0/7) + 2567.0/3)*theta(15*PI -t)*theta(t - 11*PI) + (-2.0/5*sin(3.0/2 - 69*t) - 1.0/7*sin(6.0/5 - 68*t) - 9.0/7*sin(11.0/7 - 63*t) - 4.0/5*sin(11.0/7 - 62*t) - 8.0/3*sin(14.0/9 - 57*t) - 4.0/3*sin(14.0/9 - 56*t) - 7.0/6*sin(3.0/2 - 55*t) - 12.0/5*sin(3.0/2 - 51*t) - 1.0/5*sin(9.0/8 - 50*t) - 79.0/20*sin(3.0/2 - 45*t) - 35.0/9*sin(3.0/2 - 44*t) - 7.0/8*sin(3.0/2 - 41*t) - 7.0/4*sin(3.0/2 - 40*t) - 12.0/5*sin(3.0/2 - 39*t) - 7.0/3*sin(11.0/7 - 34*t) - 5.0/4*sin(11.0/7 - 33*t) - 53.0/26*sin(11.0/7 - 23*t) - 2*sin(11.0/7 - 22*t) - 111.0/10*sin(11.0/7 - 15*t) - 9.0/2*sin(14.0/9 - 10*t) - 183.0/4*sin(11.0/7 - 9*t) - 589.0/4*sin(11.0/7 - 6*t) - 141.0/4*sin(11.0/7 - 5*t) + 173.0/3*sin(t + 33.0/7) + 343.0/5*sin(2*t + 11.0/7) + 203.0/3*sin(3*t + 8.0/5) + 191.0/7*sin(4*t + 33.0/7) + 83*sin(7*t + 8.0/5) + 50.0/3*sin(8*t + 14.0/3) + 7.0/4*sin(11*t + 9.0/2) + 142.0/7*sin(12*t + 33.0/7) + 122.0/9*sin(13*t + 8.0/5) + 71.0/6*sin(14*t + 33.0/7) + 2*sin(16*t + 23.0/5) + 13.0/9*sin(17*t + 14.0/3) + 69.0/10*sin(18*t + 33.0/7) + 13.0/8*sin(19*t + 12.0/7) + 22.0/5*sin(20*t + 14.0/3) + 9.0/10*sin(21*t + 14.0/3) + 35.0/6*sin(24*t + 14.0/3) + 3.0/5*sin(25*t + 17.0/9) + 16.0/7*sin(26*t + 14.0/3) + 13.0/12*sin(27*t + 8.0/5) + 4.0/3*sin(28*t + 11.0/7) + 7.0/3*sin(29*t + 14.0/3) + 23.0/9*sin(30*t + 33.0/7) + 5.0/6*sin(31*t + 40.0/9) + 8.0/7*sin(32*t + 5.0/3) + 21.0/11*sin(35*t + 33.0/7) + 5.0/3*sin(36*t + 14.0/3) +sin(37*t + 7.0/4) + 1.0/20*sin(38*t + 1.0/2) + 3.0/7*sin(42*t + 37.0/8) + 15.0/7*sin(43*t + 33.0/7) + 7.0/4*sin(46*t + 11.0/7) + 47.0/7*sin(47*t + 8.0/5) + 45.0/7*sin(48*t + 8.0/5) + 35.0/9*sin(49*t + 8.0/5) + 1.0/4*sin(52*t + 23.0/12) + 3.0/4*sin(53*t + 15.0/8) + 4.0/7*sin(54*t + 23.0/5) + 2.0/3*sin(58*t + 23.0/5) + 7.0/6*sin(59*t + 37.0/8) + 13.0/7*sin(60*t + 33.0/7) + 7.0/6*sin(61*t + 33.0/7) + 1.0/5*sin(64*t + 21.0/8) + 3.0/5*sin(65*t + 37.0/8) + 3.0/5*sin(66*t + 14.0/3) + 2.0/5*sin(67*t + 14.0/9) + 11.0/12*sin(70*t + 12.0/7) + 2.0/7*sin(71*t + 13.0/8) + 1.0/6*sin(72*t + 7.0/4) + 4.0/5*sin(73*t + 8.0/5) + 1.0/2*sin(74*t + 3.0/2) + 1.0/4*sin(75*t + 3.0/2) + 6.0/5*sin(76*t + 8.0/5) + 5.0/7*sin(77*t + 8.0/5) + 2.0/3*sin(78*t + 3.0/2) + 3.0/5*sin(79*t + 3.0/2) + 1.0/4*sin(80*t + 9.0/7) + 10611.0/14)*theta(11*PI -t)*theta(t - 7*PI) + (-662.0/7*sin(11.0/7 - 3*t) - 242.0/5*sin(14.0/9 - 2*t) - 178.0/5*sin(11.0/7 -t) + 335.0/8*sin(4*t + 8.0/5) + 220.0/9*sin(5*t + 8.0/5) + 19.0/4*sin(6*t + 5.0/3) + 10.0/3*sin(7*t + 14.0/3) + 121.0/20*sin(8*t + 8.0/5) + 16.0/3*sin(9*t + 5.0/3) + 99.0/5*sin(10*t + 8.0/5) + 18.0/7*sin(11*t + 15.0/8) + 13.0/4*sin(12*t + 7.0/4) + 3097.0/5)*theta(7*PI -t)*theta(t - 3*PI) + (-7.0/5*sin(11.0/7 - 15*t) - 41.0/4*sin(11.0/7 - 8*t) - 773.0/7*sin(11.0/7 - 2*t) - 577.0/12*sin(11.0/7 -t) + 533.0/28*sin(3*t + 11.0/7) + 67.0/5*sin(4*t + 8.0/5) + 4.0/9*sin(5*t + 14.0/3) + 15.0/4*sin(6*t + 8.0/5) + 89.0/15*sin(7*t + 11.0/7) + 21.0/2*sin(9*t + 8.0/5) + 1.0/8*sin(10*t + 17.0/4) + 141.0/35*sin(11*t + 8.0/5) + 117.0/29*sin(12*t + 33.0/7) + 9*sin(13*t + 8.0/5) + 27.0/5*sin(14*t + 8.0/5) + 24.0/7*sin(16*t + 8.0/5) + 27.0/8*sin(17*t + 8.0/5) + 5.0/2*sin(18*t + 8.0/5) + 3691.0/4)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}

float y(float t)
{
  return ((-19.0/5*sin(11.0/7 - 9*t) - 139.0/8*sin(11.0/7 - 5*t) - 102.0/7*sin(11.0/7 - 3*t) - 19.0/2*sin(11.0/7 - 2*t) + 1955.0/7*sin(t + 8.0/5) + 426.0/25*sin(4*t + 11.0/7) + 133.0/4*sin(6*t + 8.0/5) + 137.0/17*sin(7*t + 8.0/5) + 32.0/3*sin(8*t + 8.0/5) + 25.0/6*sin(10*t + 11.0/7) + 9.0/2*sin(11*t + 8.0/5) + 85.0/28*sin(12*t + 8.0/5) - 1044.0/5)*theta(151*PI -t)*theta(t - 147*PI) + (-73.0/9*sin(14.0/9 - 11*t) - 44.0/7*sin(3.0/2 - 10*t) - 76.0/9*sin(14.0/9 - 9*t) - 97.0/8*sin(11.0/7 - 7*t) - 1501.0/30*sin(11.0/7 - 3*t) - 276.0/5*sin(11.0/7 - 2*t) - 1783.0/5*sin(11.0/7 -t) + 463.0/7*sin(4*t + 8.0/5) + 9.0/2*sin(5*t + 14.0/3) + 9.0/10*sin(6*t + 9.0/7) + 11.0/3*sin(8*t + 11.0/7) + 38.0/13*sin(12*t + 8.0/5) - 1486.0/11)*theta(147*PI -t)*theta(t - 143*PI) + (-53.0/9*sin(10.0/7 - 26*t) - 17.0/5*sin(11.0/8 - 25*t) - 71.0/11*sin(13.0/9 - 22*t) - 9.0/4*sin(14.0/9 - 20*t) - 32.0/11*sin(10.0/7 - 19*t) - 7.0/2*sin(3.0/2 - 18*t) - 32.0/5*sin(13.0/9 - 15*t) - 72.0/7*sin(3.0/2 - 9*t) - 63.0/2*sin(14.0/9 - 6*t) - 95.0/8*sin(14.0/9 - 5*t) - 48*sin(11.0/7 - 4*t) + 596.0/7*sin(t + 8.0/5) + 428.0/3*sin(2*t + 8.0/5) + 32.0/31*sin(3*t + 3.0/2) + 23.0/4*sin(7*t + 13.0/8) + 27.0/2*sin(8*t + 8.0/5) + 45.0/4*sin(10*t + 8.0/5) + 55.0/8*sin(11*t + 8.0/5) + 1.0/8*sin(12*t + 4.0/5) + 11*sin(13*t + 5.0/3) + 89.0/7*sin(14*t + 5.0/3) + 3.0/5*sin(16*t + 5.0/3) + 91.0/15*sin(17*t + 5.0/3) + 9.0/8*sin(21*t + 8.0/5) + 17.0/9*sin(23*t + 8.0/5) + 3.0/4*sin(24*t + 14.0/3) + 7.0/4*sin(27*t + 5.0/3) - 2241.0/7)*theta(143*PI -t)*theta(t - 139*PI) + (-16.0/7*sin(3.0/2 - 28*t) - 23.0/11*sin(3.0/2 - 25*t) - 5.0/4*sin(3.0/2 - 24*t) - 17.0/8*sin(3.0/2 - 21*t) - 16.0/7*sin(3.0/2 - 20*t) - 2.0/3*sin(3.0/2 - 19*t) - 11.0/5*sin(11.0/7 - 16*t) - 26.0/5*sin(11.0/7 - 14*t) - 7.0/2*sin(14.0/9 - 13*t) - 12.0/5*sin(14.0/9 - 12*t) - 24.0/5*sin(11.0/7 - 11*t) - 14.0/9*sin(14.0/9 - 10*t) - 1.0/6*sin(6.0/5 - 9*t) - 26.0/3*sin(11.0/7 - 8*t) - 29.0/2*sin(11.0/7 - 6*t) - 15.0/2*sin(11.0/7 - 5*t) - 186.0/7*sin(11.0/7 - 4*t) - 101.0/10*sin(11.0/7 - 3*t) - 251.0/2*sin(11.0/7 - 2*t) - 4.0/5*sin(3.0/2 -t) + 68.0/7*sin(7*t + 8.0/5) + 3.0/5*sin(15*t + 3.0/2) + 8.0/9*sin(17*t + 11.0/7) + 3.0/5*sin(18*t + 8.0/5) +sin(22*t + 8.0/5) + 3.0/4*sin(23*t + 13.0/8) + 1.0/3*sin(26*t + 37.0/8) + 9.0/4*sin(27*t + 8.0/5) + 5502.0/5)*theta(139*PI -t)*theta(t - 135*PI) + (-14.0/13*sin(14.0/9 - 12*t) - 8.0/7*sin(14.0/9 - 11*t) - 11.0/10*sin(14.0/9 - 8*t) - 25.0/8*sin(11.0/7 - 7*t) - 8.0/3*sin(11.0/7 - 5*t) - 56.0/5*sin(11.0/7 - 3*t) - 52.0/7*sin(11.0/7 - 2*t) - 275.0/6*sin(11.0/7 -t) + 21.0/11*sin(4*t + 11.0/7) + 11.0/8*sin(6*t + 11.0/7) + 1.0/4*sin(9*t + 5.0/3) + 5.0/6*sin(10*t + 8.0/5) + 2105.0/4)*theta(135*PI -t)*theta(t - 131*PI) + (-5.0/2*sin(11.0/7 - 10*t) - 29.0/4*sin(11.0/7 - 8*t) - 1.0/6*sin(10.0/9 - 7*t) - 40.0/7*sin(11.0/7 - 4*t) - 28.0/3*sin(11.0/7 - 3*t) - 1381.0/20*sin(11.0/7 -t) + 13.0/6*sin(2*t + 8.0/5) + 3*sin(5*t + 8.0/5) + 1.0/7*sin(6*t + 11.0/5) + 7.0/3*sin(9*t + 8.0/5) + 74.0/7*sin(11*t + 8.0/5) + 24.0/7*sin(12*t + 8.0/5) - 533.0/4)*theta(131*PI -t)*theta(t - 127*PI) + (-7.0/8*sin(11.0/7 - 37*t) - 183.0/8*sin(11.0/7 - 11*t) - 37.0/2*sin(11.0/7 - 3*t) + 1946.0/5*sin(t + 11.0/7) + 1664.0/9*sin(2*t + 11.0/7) + 44.0/3*sin(4*t + 33.0/7) + 5.0/2*sin(5*t + 33.0/7) + 1.0/4*sin(6*t + 5.0/3) + 3.0/2*sin(7*t + 8.0/5) + 62.0/5*sin(8*t + 33.0/7) + 30.0/7*sin(9*t + 11.0/7) + 35.0/8*sin(10*t + 8.0/5) + 107.0/3*sin(12*t + 11.0/7) + 271.0/16*sin(13*t + 33.0/7) + 65.0/8*sin(14*t + 14.0/3) + 33.0/16*sin(15*t + 33.0/7) + 80.0/7*sin(16*t + 11.0/7) + 29.0/4*sin(17*t + 33.0/7) + 29.0/7*sin(18*t + 14.0/3) + 1.0/13*sin(19*t + 3.0/4) + 19.0/5*sin(20*t + 14.0/9) + 22.0/3*sin(21*t + 11.0/7) + 9.0/2*sin(22*t + 3.0/2) + 15.0/4*sin(23*t + 14.0/9) + 25.0/8*sin(24*t + 14.0/9) + 6.0/5*sin(25*t + 14.0/9) + 7.0/3*sin(26*t + 33.0/7) + 5.0/4*sin(27*t + 11.0/7) + 11.0/2*sin(28*t + 3.0/2) + 176.0/35*sin(29*t + 3.0/2) + 2.0/5*sin(30*t + 10.0/7) + 27.0/4*sin(31*t + 14.0/3) + 2*sin(32*t + 8.0/5) + 1.0/2*sin(33*t + 37.0/8) + 3.0/5*sin(34*t + 14.0/3) + 29.0/15*sin(35*t + 14.0/9) + 3.0/8*sin(36*t + 10.0/7) + 12.0/7*sin(38*t + 14.0/9) + 1.0/6*sin(39*t + 11.0/7) + 13.0/7*sin(40*t + 14.0/3) + 7.0/5*sin(41*t + 11.0/7) + 1.0/6*sin(42*t + 13.0/9) + 2138.0/5)*theta(127*PI -t)*theta(t - 123*PI) + (-1.0/2*sin(10.0/7 - 41*t) - 11.0/5*sin(14.0/9 - 40*t) - 7.0/8*sin(14.0/9 - 39*t) - 8.0/3*sin(11.0/7 - 31*t) - 6.0/7*sin(3.0/2 - 27*t) - 2.0/5*sin(11.0/7 - 26*t) - 8.0/3*sin(14.0/9 - 25*t) - 101.0/6*sin(11.0/7 - 16*t) - 7.0/3*sin(3.0/2 - 14*t) - 33.0/2*sin(11.0/7 - 13*t) - 43.0/2*sin(11.0/7 - 8*t) - 123.0/5*sin(11.0/7 - 7*t) - 1114.0/5*sin(11.0/7 -t) + 1457.0/9*sin(2*t + 11.0/7) + 141.0/5*sin(3*t + 8.0/5) + 197.0/5*sin(4*t + 8.0/5) + 71.0/8*sin(5*t + 8.0/5) + 314.0/7*sin(6*t + 8.0/5) + 575.0/18*sin(9*t + 8.0/5) + 131.0/5*sin(10*t + 8.0/5) + 53.0/6*sin(11*t + 8.0/5) + 26.0/5*sin(12*t + 11.0/7) + 39.0/7*sin(15*t + 11.0/7) + 9.0/4*sin(17*t + 3.0/2) + 19.0/7*sin(18*t + 33.0/7) + 7.0/4*sin(19*t + 11.0/7) + 14.0/13*sin(20*t + 11.0/7) + 2.0/7*sin(21*t + 14.0/3) + 11.0/5*sin(22*t + 11.0/7) + 9.0/7*sin(23*t + 13.0/8) + 2*sin(24*t + 11.0/7) + 3.0/5*sin(28*t + 33.0/7) + 5.0/7*sin(29*t + 7.0/4) + 2.0/3*sin(30*t + 3.0/2) + 2*sin(32*t + 8.0/5) + 1.0/6*sin(33*t + 5.0/3) + 9.0/8*sin(34*t + 8.0/5) + 15.0/16*sin(35*t + 8.0/5) + 3.0/4*sin(36*t + 13.0/8) + 1.0/17*sin(37*t + 29.0/15) + 10.0/7*sin(38*t + 8.0/5) - 3386.0/3)*theta(123*PI -t)*theta(t - 119*PI) + (-1.0/5*sin(3.0/2 - 35*t) - 3.0/5*sin(3.0/2 - 30*t) - 9.0/7*sin(11.0/7 - 28*t) - 1.0/3*sin(11.0/7 - 25*t) - 7.0/6*sin(10.0/7 - 21*t) - 17.0/3*sin(11.0/7 - 19*t) - 26.0/5*sin(11.0/7 - 14*t) - 25.0/4*sin(14.0/9 - 12*t) - 47.0/2*sin(11.0/7 - 10*t) - 107.0/7*sin(11.0/7 - 7*t) - 519.0/8*sin(11.0/7 - 2*t) + 239.0/5*sin(t + 8.0/5) + 123.0/5*sin(3*t + 8.0/5) + 123.0/4*sin(4*t + 33.0/7) + 41.0/3*sin(5*t + 33.0/7) + 187.0/5*sin(6*t + 33.0/7) + 383.0/6*sin(8*t + 11.0/7) + 227.0/5*sin(9*t + 11.0/7) + 609.0/19*sin(11*t + 8.0/5) + 51.0/7*sin(13*t + 8.0/5) + 33.0/7*sin(15*t + 8.0/5) + 1.0/10*sin(16*t + 9.0/5) + 32.0/11*sin(17*t + 11.0/7) + 67.0/22*sin(18*t + 8.0/5) + 23.0/6*sin(20*t + 8.0/5) + 17.0/3*sin(22*t + 8.0/5) + 16.0/5*sin(23*t + 14.0/9) + 10.0/11*sin(24*t + 3.0/2) + 7.0/8*sin(26*t + 8.0/5) + 8.0/5*sin(27*t + 11.0/7) + 17.0/4*sin(29*t + 8.0/5) + 4.0/3*sin(31*t + 13.0/8) + 3.0/4*sin(32*t + 11.0/7) + 3.0/2*sin(33*t + 11.0/7) + 5.0/4*sin(34*t + 3.0/2) + 1.0/2*sin(36*t + 32.0/7) + 7.0/8*sin(37*t + 33.0/7) + 3.0/8*sin(38*t + 14.0/9) + 4.0/5*sin(39*t + 3.0/2) - 3212.0/5)*theta(119*PI -t)*theta(t - 115*PI) + (-2.0/3*sin(3.0/2 - 30*t) - 4.0/5*sin(3.0/2 - 28*t) - 11.0/8*sin(3.0/2 - 26*t) - 7.0/6*sin(3.0/2 - 24*t) - 6.0/5*sin(3.0/2 - 22*t) - 3.0/4*sin(3.0/2 - 20*t) - 1.0/3*sin(7.0/6 - 19*t) - 25.0/13*sin(3.0/2 - 18*t) - 2.0/5*sin(9.0/7 - 17*t) - 2.0/7*sin(7.0/5 - 15*t) - 18.0/5*sin(11.0/7 - 14*t) - 34.0/11*sin(11.0/7 - 12*t) -sin(4.0/3 - 11*t) - 44.0/7*sin(14.0/9 - 10*t) - 34.0/5*sin(11.0/7 - 8*t) - 88.0/5*sin(11.0/7 - 6*t) - 31.0/15*sin(7.0/5 - 5*t) - 105.0/4*sin(11.0/7 - 4*t) - 1198.0/7*sin(11.0/7 - 2*t) - 9*sin(14.0/9 -t) + 31.0/7*sin(3*t + 3.0/2) + 13.0/14*sin(7*t + 9.0/7) + 4.0/9*sin(9*t + 10.0/9) + 5.0/2*sin(13*t + 11.0/7) + 6.0/5*sin(16*t + 14.0/3) + 1.0/9*sin(21*t + 6.0/7) + 1.0/8*sin(23*t + 6.0/7) + 4.0/5*sin(25*t + 11.0/7) + 1.0/8*sin(27*t + 5.0/6) + 2.0/5*sin(29*t + 8.0/5) - 425.0/2)*theta(115*PI -t)*theta(t - 111*PI) + (-5.0/4*sin(11.0/7 - 11*t) - 17.0/4*sin(11.0/7 - 10*t) - 30.0/7*sin(11.0/7 - 9*t) - 59.0/12*sin(11.0/7 - 8*t) - 7.0/2*sin(11.0/7 - 7*t) - 81.0/5*sin(11.0/7 - 6*t) - 115.0/7*sin(11.0/7 - 3*t) - 25.0/8*sin(11.0/7 - 2*t) - 127*sin(11.0/7 -t) + 21.0/2*sin(4*t + 8.0/5) + 5*sin(5*t + 8.0/5) + 5.0/6*sin(12*t + 8.0/5) - 1169.0/5)*theta(111*PI -t)*theta(t - 107*PI) + (-1.0/3*sin(11.0/7 - 7*t) - 61.0/8*sin(11.0/7 - 5*t) + 319.0/16*sin(t + 8.0/5) + 40.0/3*sin(2*t + 11.0/7) + 73.0/4*sin(3*t + 8.0/5) + 29.0/7*sin(4*t + 11.0/7) + 86.0/9*sin(6*t + 8.0/5) + 25.0/24*sin(8*t + 8.0/5) + 2.0/5*sin(9*t + 14.0/3) + 9.0/7*sin(10*t + 11.0/7) + 1.0/5*sin(11*t + 8.0/5) + 2.0/3*sin(12*t + 8.0/5) - 669.0/4)*theta(107*PI -t)*theta(t - 103*PI) + (-12.0/11*sin(11.0/7 - 11*t) + 15.0/8*sin(t + 33.0/7) + 11.0/6*sin(2*t + 33.0/7) + 4*sin(3*t + 33.0/7) + 83.0/7*sin(4*t + 8.0/5) + 300.0/23*sin(5*t + 8.0/5) + 4.0/3*sin(6*t + 8.0/5) + 47.0/12*sin(7*t + 33.0/7) + 21.0/4*sin(8*t + 8.0/5) + 23.0/9*sin(9*t + 33.0/7) + 7.0/3*sin(10*t + 8.0/5) + 1.0/3*sin(12*t + 8.0/5) - 2118.0/13)*theta(103*PI -t)*theta(t - 99*PI) + (-2.0/5*sin(13.0/9 - 27*t) - 1.0/5*sin(3.0/2 - 26*t) - 1.0/7*sin(7.0/5 - 22*t) - 1.0/8*sin(14.0/9 - 20*t) - 1.0/9*sin(4.0/3 - 9*t) - 171.0/2*sin(11.0/7 -t) + 24*sin(2*t + 11.0/7) + 7.0/2*sin(3*t + 8.0/5) + 37.0/7*sin(4*t + 8.0/5) + 5*sin(5*t + 8.0/5) + 8.0/5*sin(6*t + 5.0/3) + 23.0/6*sin(7*t + 8.0/5) + 2.0/5*sin(8*t + 14.0/3) + 10.0/11*sin(10*t + 33.0/7) + 15.0/8*sin(11*t + 8.0/5) + 1.0/6*sin(12*t + 9.0/5) + 1.0/31*sin(13*t + 5.0/3) + 1.0/4*sin(14*t + 14.0/3) + 3.0/7*sin(15*t + 11.0/7) + 1.0/35*sin(16*t + 53.0/13) + 2.0/3*sin(17*t + 5.0/3) + 4.0/7*sin(18*t + 5.0/3) + 2.0/7*sin(19*t + 5.0/3) + 1.0/27*sin(21*t + 9.0/7) + 1.0/13*sin(23*t + 37.0/8) + 3.0/5*sin(24*t + 12.0/7) + 4.0/7*sin(25*t + 5.0/3) + 1.0/6*sin(28*t + 5.0/3) - 2173.0/6)*theta(99*PI -t)*theta(t - 95*PI) + (-8.0/5*sin(11.0/7 - 11*t) + 224.0/5*sin(t + 11.0/7) + 1176.0/5*sin(2*t + 8.0/5) + 107.0/5*sin(3*t + 33.0/7) + 13.0/3*sin(4*t + 11.0/7) + 21.0/4*sin(5*t + 11.0/7) + 92.0/5*sin(6*t + 11.0/7) + 55.0/7*sin(7*t + 33.0/7) + 41.0/14*sin(8*t + 8.0/5) + 3.0/4*sin(9*t + 5.0/3) + 61.0/10*sin(10*t + 11.0/7) + 11.0/6*sin(12*t + 11.0/7) - 1063.0/5)*theta(95*PI -t)*theta(t - 91*PI) + (-22.0/3*sin(11.0/7 - 10*t) - 26.0/7*sin(11.0/7 - 8*t) - 309.0/5*sin(11.0/7 -t) + 398.0/5*sin(2*t + 8.0/5) + 311.0/7*sin(3*t + 8.0/5) + 107.0/9*sin(4*t + 8.0/5) + 15.0/7*sin(5*t + 3.0/2) + 13.0/9*sin(6*t + 14.0/9) + 10*sin(7*t + 8.0/5) + 39.0/7*sin(9*t + 11.0/7) + 12.0/5*sin(11*t + 11.0/7) + 9.0/8*sin(12*t + 14.0/3) - 695.0/6)*theta(91*PI -t)*theta(t - 87*PI) + (-23.0/5*sin(3.0/2 - 12*t) - 57.0/8*sin(14.0/9 - 11*t) - 13.0/5*sin(11.0/7 - 9*t) - 47.0/7*sin(14.0/9 - 6*t) - 23.0/7*sin(3.0/2 - 5*t) - 356.0/17*sin(11.0/7 - 4*t) - 37.0/2*sin(11.0/7 - 3*t) - 163.0/5*sin(11.0/7 - 2*t) + 145.0/7*sin(t + 11.0/7) + 1.0/3*sin(7*t + 3.0/2) + 1.0/15*sin(8*t + 4.0/3) + 53.0/6*sin(10*t + 8.0/5) - 213.0/5)*theta(87*PI -t)*theta(t - 83*PI) + (-3258.0/7*sin(11.0/7 -t) + 1038.0/7*sin(2*t + 11.0/7) + 213.0/5*sin(3*t + 8.0/5) + 1.0/5*sin(4*t + 11.0/8) + 33.0/4*sin(5*t + 11.0/7) + 95.0/16*sin(6*t + 11.0/7) + 36.0/5*sin(7*t + 8.0/5) + 30.0/7*sin(8*t + 8.0/5) + 3.0/5*sin(9*t + 3.0/2) + 1.0/24*sin(10*t + 22.0/5) + 11.0/6*sin(11*t + 8.0/5) + 1.0/7*sin(12*t + 29.0/14) + 411)*theta(83*PI -t)*theta(t - 79*PI) + (285.0/4*sin(t + 33.0/7) + 51.0/2*sin(2*t + 33.0/7) + 141.0/4*sin(3*t + 11.0/7) + 14.0/5*sin(4*t + 3.0/2) + 29.0/4*sin(5*t + 11.0/7) + 35.0/4*sin(6*t + 11.0/7) + 35.0/4*sin(7*t + 11.0/7) + 6*sin(8*t + 11.0/7) + 46.0/5*sin(9*t + 11.0/7) + 2.0/3*sin(10*t + 14.0/3) + 9.0/5*sin(11*t + 33.0/7) + 15.0/4*sin(12*t + 11.0/7) + 99.0/5)*theta(79*PI -t)*theta(t - 75*PI) + (-7.0/3*sin(11.0/7 - 11*t) - 5.0/3*sin(11.0/7 - 10*t) - 107.0/6*sin(11.0/7 - 5*t) - 80.0/3*sin(11.0/7 - 3*t) + 38*sin(t + 11.0/7) + 91.0/5*sin(2*t + 11.0/7) + 41.0/5*sin(4*t + 8.0/5) + 55.0/8*sin(6*t + 8.0/5) + 16.0/5*sin(7*t + 8.0/5) + 1.0/5*sin(8*t + 3.0/2) + 2.0/3*sin(9*t + 8.0/5) + 17.0/7*sin(12*t + 8.0/5) - 287.0/5)*theta(75*PI -t)*theta(t - 71*PI) + (-1.0/13*sin(2.0/5 - 16*t) - 83.0/12*sin(14.0/9 - 5*t) - 19.0/5*sin(3.0/2 - 3*t) + 2497.0/5*sin(t + 33.0/7) + 177.0/4*sin(2*t + 33.0/7) + 335.0/12*sin(4*t + 11.0/7) + 53.0/2*sin(6*t + 11.0/7) + 9.0/4*sin(7*t + 13.0/9) + 64.0/5*sin(8*t + 11.0/7) + 26.0/7*sin(9*t + 14.0/9) + 36.0/5*sin(10*t + 11.0/7) + 18.0/5*sin(11*t + 11.0/7) + 17.0/5*sin(12*t + 14.0/9) + 7.0/2*sin(13*t + 11.0/7) + 9.0/5*sin(14*t + 3.0/2) + 9.0/5*sin(15*t + 11.0/7) + 8.0/7*sin(17*t + 11.0/7) + 13.0/8*sin(18*t + 14.0/3) + 7.0/4*sin(19*t + 14.0/3) + 1.0/20*sin(20*t + 17.0/6) + 31.0/9*sin(21*t + 14.0/3) + 13.0/7*sin(22*t + 14.0/3) + 1.0/6*sin(23*t + 23.0/12) + 2787.0/5)*theta(71*PI -t)*theta(t - 67*PI) + (-3.0/8*sin(3.0/2 - 34*t) - 13.0/7*sin(3.0/2 - 26*t) - 26.0/9*sin(14.0/9 - 20*t) - 3.0/2*sin(3.0/2 - 15*t) - 19.0/10*sin(11.0/7 - 14*t) - 61.0/8*sin(11.0/7 - 9*t) - 85.0/4*sin(11.0/7 - 6*t) - 1195.0/13*sin(11.0/7 - 2*t) - 793.0/9*sin(11.0/7 -t) + 216.0/5*sin(3*t + 8.0/5) + 19.0/2*sin(4*t + 33.0/7) + 153.0/19*sin(5*t + 11.0/7) + 220.0/9*sin(7*t + 8.0/5) + 43.0/8*sin(8*t + 8.0/5) + 55.0/4*sin(10*t + 8.0/5) + 179.0/18*sin(11*t + 8.0/5) + 10.0/11*sin(12*t + 9.0/2) + 47.0/5*sin(13*t + 8.0/5) + 1.0/35*sin(17*t + 11.0/6) + 13.0/7*sin(18*t + 8.0/5) + 1.0/3*sin(19*t + 14.0/9) + 5.0/2*sin(21*t + 8.0/5) + 4.0/3*sin(22*t + 5.0/3) + 23.0/22*sin(23*t + 5.0/3) + 11.0/10*sin(24*t + 12.0/7) + 1.0/3*sin(25*t + 14.0/9) + 1.0/3*sin(27*t + 8.0/5) + 11.0/7*sin(28*t + 5.0/3) + 7.0/5*sin(29*t + 12.0/7) + 2.0/3*sin(30*t + 7.0/4) + 7.0/6*sin(31*t + 5.0/3) + 3.0/7*sin(32*t + 33.0/7) + 1.0/8*sin(35*t + 32.0/7) + 1.0/3*sin(36*t + 7.0/4) + 1981.0/10)*theta(67*PI -t)*theta(t - 63*PI) + (-30.0/29*sin(3.0/2 - 30*t) - 1.0/9*sin(14.0/9 - 28*t) - 11.0/7*sin(14.0/9 - 24*t) - 34.0/33*sin(3.0/2 - 22*t) - 15.0/8*sin(3.0/2 - 17*t) - 9.0/4*sin(11.0/7 - 16*t) - 152.0/7*sin(11.0/7 - 6*t) - 7.0/8*sin(11.0/7 - 4*t) - 816.0/7*sin(11.0/7 - 2*t) + 308.0/5*sin(t + 33.0/7) + 17*sin(3*t + 8.0/5) + 16.0/5*sin(5*t + 33.0/7) + 198.0/7*sin(7*t + 8.0/5) + 53.0/8*sin(8*t + 11.0/7) + 1.0/8*sin(9*t + 4.0/7) + 6*sin(10*t + 8.0/5) + 1.0/2*sin(11*t + 6.0/5) + 1.0/2*sin(12*t + 8.0/5) + 104.0/15*sin(13*t + 11.0/7) + 13.0/6*sin(14*t + 3.0/2) + 63.0/8*sin(15*t + 8.0/5) + 12.0/5*sin(18*t + 8.0/5) + 2.0/5*sin(19*t + 4.0/3) + 7.0/4*sin(20*t + 8.0/5) + 27.0/8*sin(21*t + 8.0/5) + 1.0/23*sin(23*t + 13.0/4) + 3.0/7*sin(25*t + 11.0/7) + 6.0/5*sin(26*t + 8.0/5) + 1.0/4*sin(27*t + 13.0/9) + 2.0/5*sin(29*t + 8.0/5) + 1.0/14*sin(31*t + 23.0/12) + 2.0/5*sin(32*t + 8.0/5) + 2308.0/9)*theta(63*PI -t)*theta(t - 59*PI) + (-131.0/7*sin(11.0/7 - 6*t) - 5406.0/11*sin(11.0/7 - 2*t) - 131.0/5*sin(11.0/7 -t) + 119.0/5*sin(3*t + 11.0/7) + 224.0/5*sin(4*t + 8.0/5) + 1.0/9*sin(5*t + 13.0/4) + 73.0/6*sin(7*t + 8.0/5) + 159.0/5*sin(8*t + 8.0/5) + 3.0/5*sin(9*t + 13.0/9) + 59.0/7*sin(10*t + 8.0/5) + 28.0/5*sin(11*t + 8.0/5) + 19*sin(12*t + 8.0/5) - 48.0/5)*theta(59*PI -t)*theta(t - 55*PI) + (-17.0/7*sin(10.0/7 - 5*t) - 26.0/5*sin(3.0/2 - 3*t) - 2578.0/7*sin(11.0/7 - 2*t) + 24.0/7*sin(t + 3.0/2) + 47.0/5*sin(4*t + 14.0/3) + 7.0/4*sin(6*t + 14.0/3) + 3.0/5*sin(7*t + 9.0/2) + 101.0/7*sin(8*t + 8.0/5) + 9.0/7*sin(9*t + 9.0/5) + 7.0/2*sin(10*t + 14.0/9) + 1.0/8*sin(11*t + 26.0/9) + 55.0/4*sin(12*t + 8.0/5) - 145.0/7)*theta(55*PI -t)*theta(t - 51*PI) + (-505.0/9*sin(11.0/7 - 3*t) + 809.0/5*sin(t + 8.0/5) + 1934.0/9*sin(2*t + 8.0/5) + 103.0/4*sin(4*t + 8.0/5) + 83.0/4*sin(5*t + 8.0/5) + 46.0/5*sin(6*t + 13.0/8) + 5*sin(7*t + 14.0/3) + 59.0/4*sin(8*t + 8.0/5) + 4.0/7*sin(9*t + 17.0/4) + 2.0/3*sin(10*t + 41.0/9) + 14.0/9*sin(11*t + 5.0/3) + 39.0/8*sin(12*t + 8.0/5) - 3564.0/5)*theta(51*PI -t)*theta(t - 47*PI) + (-11.0/6*sin(11.0/7 - 11*t) - 15.0/8*sin(14.0/9 - 10*t) - 58.0/9*sin(11.0/7 - 7*t) - 12.0/5*sin(11.0/7 - 5*t) + 599.0/12*sin(t + 8.0/5) + 668.0/5*sin(2*t + 8.0/5) + 16*sin(3*t + 33.0/7) + 24.0/5*sin(4*t + 8.0/5) + 31.0/7*sin(6*t + 11.0/7) + 2*sin(8*t + 14.0/9) + 15.0/4*sin(9*t + 33.0/7) + 3.0/4*sin(12*t + 3.0/2) - 4729.0/5)*theta(47*PI -t)*theta(t - 43*PI) + (-1.0/5*sin(5.0/4 - 50*t) - 6.0/7*sin(14.0/9 - 45*t) - 13.0/8*sin(11.0/7 - 42*t) - 5.0/4*sin(3.0/2 - 41*t) - 1.0/4*sin(6.0/5 - 40*t) - 9.0/5*sin(11.0/7 - 39*t) - 11.0/6*sin(14.0/9 - 35*t) - 19.0/6*sin(14.0/9 - 30*t) - 6.0/5*sin(3.0/2 - 28*t) - 16.0/15*sin(3.0/2 - 27*t) - 19.0/3*sin(11.0/7 - 23*t) - 67.0/6*sin(11.0/7 - 21*t) - 8.0/5*sin(3.0/2 - 16*t) - 113.0/19*sin(14.0/9 - 15*t) - 55.0/8*sin(11.0/7 - 14*t) - 87.0/22*sin(11.0/7 - 13*t) - 117.0/5*sin(11.0/7 - 9*t) - 11.0/6*sin(3.0/2 - 8*t) + 152.0/5*sin(t + 8.0/5) + 309.0/2*sin(2*t + 8.0/5) + 50.0/3*sin(3*t + 8.0/5) + 80.0/3*sin(4*t + 8.0/5) + 29.0/6*sin(5*t + 33.0/7) + 20*sin(6*t + 8.0/5) + 313.0/24*sin(7*t + 8.0/5) + 119.0/6*sin(10*t + 8.0/5) + 18.0/5*sin(11*t + 8.0/5) + 39.0/5*sin(12*t + 8.0/5) + 2.0/5*sin(17*t + 12.0/7) + 23.0/6*sin(18*t + 33.0/7) + 40.0/7*sin(19*t + 8.0/5) + 2.0/3*sin(20*t + 3.0/2) + 10.0/3*sin(22*t + 11.0/7) + 52.0/7*sin(24*t + 8.0/5) + 13.0/4*sin(25*t + 8.0/5) + 1.0/5*sin(26*t + 31.0/16) + 1.0/2*sin(29*t + 3.0/2) + 1.0/4*sin(31*t + 7.0/4) + 4.0/7*sin(32*t + 14.0/3) + 3.0/5*sin(33*t + 8.0/5) + 1.0/6*sin(34*t + 8.0/7) + 2.0/3*sin(36*t + 8.0/5) + 13.0/7*sin(37*t + 5.0/3) + 13.0/8*sin(38*t + 8.0/5) +sin(43*t + 5.0/3) +sin(44*t + 8.0/5) + 1.0/2*sin(46*t + 11.0/7) + 1.0/13*sin(47*t + 8.0/5) + 3.0/7*sin(48*t + 5.0/3) + 1.0/3*sin(49*t + 23.0/5) + 1445.0/2)*theta(43*PI -t)*theta(t - 39*PI) + (-23.0/6*sin(11.0/7 - 11*t) - 125.0/9*sin(11.0/7 - 9*t) - 155.0/11*sin(11.0/7 - 8*t) - 87.0/4*sin(11.0/7 - 6*t) - 41.0/3*sin(11.0/7 - 5*t) - 567.0/5*sin(11.0/7 - 3*t) - 487.0/3*sin(11.0/7 - 2*t) + 1728.0/5*sin(t + 11.0/7) + 79.0/6*sin(4*t + 33.0/7) + 67.0/7*sin(7*t + 33.0/7) + 8.0/5*sin(10*t + 8.0/5) + 1.0/4*sin(12*t + 10.0/7) + 4225.0/7)*theta(39*PI -t)*theta(t - 35*PI) + (-2.0/5*sin(9.0/8 - 11*t) - 59.0/3*sin(11.0/7 - 8*t) - 393.0/14*sin(11.0/7 - 6*t) - 389.0/6*sin(11.0/7 - 4*t) - 3308.0/9*sin(11.0/7 - 2*t) - 1829.0/6*sin(11.0/7 -t) + 49.0/3*sin(3*t + 11.0/7) + 5.0/2*sin(5*t + 10.0/7) + 9.0/5*sin(7*t + 4.0/3) + 9.0/8*sin(9*t + 7.0/5) + 39.0/5*sin(10*t + 33.0/7) + 49.0/8*sin(12*t + 33.0/7) + 4222.0/5)*theta(35*PI -t)*theta(t - 31*PI) + (-52.0/7*sin(11.0/7 - 19*t) - 38.0/13*sin(13.0/9 - 12*t) - 1.0/3*sin(12.0/13 - 11*t) - 26.0/3*sin(11.0/7 - 9*t) - 590.0/3*sin(11.0/7 - 5*t) - 29*sin(11.0/7 - 3*t) - 2227.0/14*sin(11.0/7 - 2*t) + 279.0/4*sin(t + 8.0/5) + 249.0/4*sin(4*t + 8.0/5) + 425.0/7*sin(6*t + 8.0/5) + 263.0/3*sin(7*t + 8.0/5) + 871.0/15*sin(8*t + 8.0/5) + 89.0/6*sin(10*t + 8.0/5) + 10.0/11*sin(13*t + 37.0/8) + 93.0/5*sin(14*t + 8.0/5) + 59.0/9*sin(15*t + 8.0/5) + 119.0/12*sin(16*t + 8.0/5) + 4.0/3*sin(17*t + 5.0/3) + 17.0/5*sin(18*t + 11.0/7) + 4*sin(20*t + 8.0/5) + 6.0/5*sin(21*t + 8.0/5) + 17.0/4*sin(22*t + 8.0/5) + 6.0/5*sin(23*t + 8.0/5) - 7537.0/7)*theta(31*PI -t)*theta(t - 27*PI) + (-13.0/5*sin(11.0/7 - 12*t) - 50.0/17*sin(11.0/7 - 11*t) - 8.0/5*sin(11.0/7 - 9*t) - 7.0/2*sin(11.0/7 - 8*t) - 33.0/5*sin(11.0/7 - 7*t) - 13.0/4*sin(11.0/7 - 6*t) - 13.0/5*sin(11.0/7 - 5*t) - 103.0/3*sin(11.0/7 - 3*t) - 212.0/5*sin(11.0/7 - 2*t) + 403.0/4*sin(t + 8.0/5) + 7.0/5*sin(4*t + 14.0/3) + 5.0/6*sin(10*t + 8.0/5) - 6913.0/8)*theta(27*PI -t)*theta(t - 23*PI) + (-37.0/5*sin(11.0/7 - 10*t) - 21.0/4*sin(11.0/7 - 9*t) - 63.0/5*sin(11.0/7 - 8*t) - 243.0/5*sin(11.0/7 - 6*t) - 35.0/2*sin(11.0/7 - 5*t) - 489.0/7*sin(11.0/7 - 4*t) - 496.0/5*sin(11.0/7 - 2*t) - 122*sin(11.0/7 -t) + 247.0/4*sin(3*t + 11.0/7) + 91.0/4*sin(7*t + 11.0/7) + 132.0/7*sin(11*t + 8.0/5) + 18.0/17*sin(12*t + 13.0/8) - 4562.0/7)*theta(23*PI -t)*theta(t - 19*PI) + (-5.0/8*sin(11.0/7 - 12*t) - 43.0/6*sin(11.0/7 - 9*t) - 1399.0/10*sin(11.0/7 - 3*t) - 38.0/7*sin(11.0/7 - 2*t) - 250.0/3*sin(11.0/7 -t) + 639.0/22*sin(4*t + 8.0/5) + 296.0/7*sin(5*t + 8.0/5) + 1.0/3*sin(6*t + 4.0/3) + 13.0/3*sin(7*t + 8.0/5) + 20.0/7*sin(8*t + 8.0/5) + 11.0/2*sin(10*t + 8.0/5) + 71.0/8*sin(11*t + 8.0/5) + 1551.0/4)*theta(19*PI -t)*theta(t - 15*PI) + (-33.0/7*sin(11.0/7 - 12*t) - 62.0/9*sin(11.0/7 - 10*t) - 13.0/5*sin(11.0/7 - 9*t) - 38.0/5*sin(11.0/7 - 8*t) - 110.0/7*sin(11.0/7 - 6*t) - 89.0/10*sin(11.0/7 - 5*t) - 77.0/2*sin(11.0/7 - 4*t) - 377.0/2*sin(11.0/7 - 2*t) - 38*sin(11.0/7 -t) + 100.0/9*sin(3*t + 11.0/7) + 21.0/4*sin(7*t + 11.0/7) + 17.0/8*sin(11*t + 11.0/7) + 2077.0/5)*theta(15*PI -t)*theta(t - 11*PI) + (-3.0/4*sin(7.0/5 - 80*t) - 1.0/5*sin(4.0/3 - 75*t) - 1.0/7*sin(5.0/7 - 74*t) - 1.0/12*sin(4.0/3 - 63*t) - 1.0/4*sin(11.0/7 - 62*t) - 5.0/6*sin(10.0/7 - 56*t) - 1.0/6*sin(1.0/2 - 54*t) - 28.0/5*sin(3.0/2 - 50*t) - 25.0/4*sin(3.0/2 - 49*t) - 25.0/4*sin(14.0/9 - 48*t) - 18.0/7*sin(14.0/9 - 42*t) - 27.0/13*sin(3.0/2 - 39*t) - 61.0/15*sin(3.0/2 - 38*t) - 1.0/2*sin(3.0/2 - 36*t) - 5.0/6*sin(7.0/5 - 34*t) - 7.0/2*sin(3.0/2 - 33*t) - 32.0/31*sin(10.0/7 - 32*t) - 7.0/5*sin(14.0/9 - 28*t) - 33.0/5*sin(11.0/7 - 24*t) - 3.0/4*sin(3.0/2 - 19*t) - 5*sin(11.0/7 - 18*t) - 20.0/3*sin(14.0/9 - 15*t) - 4*sin(11.0/7 - 14*t) - 141.0/10*sin(14.0/9 - 10*t) - 38.0/5*sin(11.0/7 - 9*t) - 1319.0/9*sin(11.0/7 - 4*t) - 29*sin(11.0/7 -t) + 62*sin(2*t + 8.0/5) + 2635.0/6*sin(3*t + 8.0/5) + 133.0/5*sin(5*t + 11.0/7) + 115.0/4*sin(6*t + 8.0/5) + 53.0/2*sin(7*t + 8.0/5) + 109.0/11*sin(8*t + 11.0/7) + 23.0/2*sin(11*t + 11.0/7) + 3*sin(12*t + 33.0/7) + 66.0/7*sin(13*t + 11.0/7) + 1.0/5*sin(16*t + 13.0/9) + 93.0/8*sin(17*t + 8.0/5) + 1.0/6*sin(20*t + 29.0/14) + 6.0/5*sin(21*t + 3.0/2) + 23.0/8*sin(22*t + 8.0/5) + 22.0/7*sin(23*t + 11.0/7) + 19.0/5*sin(25*t + 8.0/5) + 59.0/15*sin(26*t + 8.0/5) + 1.0/4*sin(27*t + 15.0/14) + 4.0/5*sin(29*t + 12.0/7) + 13.0/6*sin(30*t + 33.0/7) + 43.0/7*sin(31*t + 8.0/5) + 9.0/4*sin(35*t + 8.0/5) + 8.0/3*sin(37*t + 14.0/9) + 11.0/7*sin(40*t + 5.0/3) + 3.0/5*sin(41*t + 9.0/5) + 6.0/5*sin(43*t + 14.0/9) + 10.0/7*sin(44*t + 8.0/5) + 41.0/5*sin(45*t + 8.0/5) + 41.0/5*sin(46*t + 8.0/5) +sin(47*t + 13.0/8) + 3.0/7*sin(51*t + 5.0/3) + 11.0/5*sin(52*t + 5.0/3) + 8.0/5*sin(53*t + 11.0/7) + 5.0/6*sin(55*t + 7.0/5) + 7.0/8*sin(57*t + 7.0/4) + 1.0/5*sin(58*t + 11.0/5) + 3.0/5*sin(59*t + 8.0/5) + 1.0/5*sin(60*t + 14.0/13) + 32.0/31*sin(61*t + 3.0/2) + 3.0/4*sin(64*t + 33.0/7) + 1.0/3*sin(65*t + 10.0/7) + 1.0/3*sin(66*t + 7.0/5) + 16.0/17*sin(67*t + 14.0/9) + 1.0/5*sin(68*t + 9.0/5) + 1.0/2*sin(70*t + 23.0/5) + 3.0/5*sin(71*t + 8.0/5) + 1.0/6*sin(72*t + 14.0/9) + 2.0/3*sin(73*t + 7.0/5) + 1.0/4*sin(76*t + 23.0/5) + 3.0/4*sin(77*t + 12.0/7) + 1.0/6*sin(78*t + 13.0/8) + 1.0/3*sin(79*t + 10.0/7) - 491.0/10)*theta(11*PI -t)*theta(t - 7*PI) + (-25.0/7*sin(14.0/9 - 7*t) - 146.0/21*sin(11.0/7 - 6*t) + 114.0/7*sin(t + 14.0/3) + 257.0/4*sin(2*t + 8.0/5) + 346.0/3*sin(3*t + 8.0/5) + 274.0/7*sin(4*t + 33.0/7) + 115.0/6*sin(5*t + 11.0/7) + 50.0/7*sin(8*t + 8.0/5) + 5.0/3*sin(9*t + 14.0/3) + 20.0/7*sin(10*t + 14.0/3) + 24.0/5*sin(11*t + 8.0/5) + 16.0/7*sin(12*t + 33.0/7) - 9818.0/9)*theta(7*PI -t)*theta(t - 3*PI) + (-6.0/5*sin(11.0/7 - 18*t) - 9.0/10*sin(11.0/7 - 17*t) - 7.0/4*sin(11.0/7 - 13*t) - 19.0/6*sin(11.0/7 - 10*t) + 73.0/2*sin(t + 33.0/7) + 103.0/3*sin(2*t + 8.0/5) + 363.0/14*sin(3*t + 8.0/5) + 82.0/7*sin(4*t + 8.0/5) + 33.0/5*sin(5*t + 8.0/5) + 3.0/4*sin(6*t + 14.0/3) + 43.0/8*sin(7*t + 8.0/5) + 11.0/10*sin(8*t + 8.0/5) + 1.0/5*sin(9*t + 8.0/5) + 3.0/4*sin(12*t + 11.0/7) + 1.0/13*sin(15*t + 14.0/3) + 1.0/6*sin(16*t + 11.0/7) - 4927.0/4)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}
